From ea301d35e3eefd9d3e4746ba7e88860700952c84 Mon Sep 17 00:00:00 2001
From: Haris Okanovic <haris.okanovic@ni.com>
Date: Fri, 25 Jan 2019 18:50:19 -0600
Subject: [PATCH 1/3] file_util.c: file_mkdir_hier(): Avoid overly permissive
 umask

This change runs mkdir() with the caller's mode in addition to setting
it explicitly with chmod(). It ensure newly created directories never
have overly permissive access, regardless of the process umask.

Prior to this change, file_mkdir_hier() would create directories by
calling mkdir(mode=0777) then chmod() to set a more appropriate mode.
This is normally not an issue when a sane umask is set. However, there's
a brief security risk when called with an overly permissive umask:
New directories briefly had world write access.

Signed-off-by: Haris Okanovic <haris.okanovic@ni.com>
Signed-off-by: Alejandro del Castillo <alejandro.delcastillo@ni.com>

Upstream-Status: Backport
---
 libopkg/file_util.c | 24 ++++++++++++++++--------
 1 file changed, 16 insertions(+), 8 deletions(-)

diff --git a/libopkg/file_util.c b/libopkg/file_util.c
index b4a35af..a14027b 100644
--- a/libopkg/file_util.c
+++ b/libopkg/file_util.c
@@ -337,6 +337,11 @@ int file_mkdir_hier(const char *path, long mode)
     struct stat st;
     int r;
 
+    /* Default mode only permits user access */
+    if (mode == -1) {
+        mode = 0700;
+    }
+
     r = stat(path, &st);
     if (r < 0 && errno == ENOENT) {
         int status;
@@ -349,19 +354,22 @@ int file_mkdir_hier(const char *path, long mode)
         if (status < 0)
             return -1;
 
-        r = mkdir(path, 0777);
+        /* mode will be further constrained by the process umask */
+        r = mkdir(path, mode);
         if (r < 0) {
             opkg_perror(ERROR, "Cannot create directory `%s'", path);
             return -1;
         }
 
-        if (mode != -1) {
-            r = chmod(path, mode);
-            if (r < 0) {
-                opkg_perror(ERROR, "Cannot set permissions of directory `%s'",
-                            path);
-                return -1;
-            }
+        /* Set mode again with chmod() to realize the mode specified by
+         * callers, regardless of the process umask. Unlike the previous
+         * mkdir() operation, chmod() ignores umask.
+         */
+        r = chmod(path, mode);
+        if (r < 0) {
+            opkg_perror(ERROR, "Cannot set permissions of directory `%s'",
+                        path);
+            return -1;
         }
     }
 
-- 
2.20.0

