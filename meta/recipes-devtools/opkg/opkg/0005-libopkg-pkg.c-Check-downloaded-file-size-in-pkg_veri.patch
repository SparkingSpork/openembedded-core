From 2735eb647f1c39166fef69a8476b3fa46c131bb7 Mon Sep 17 00:00:00 2001
From: Haris Okanovic <haris.okanovic@ni.com>
Date: Wed, 30 Jan 2019 15:48:09 -0600
Subject: [PATCH] libopkg/pkg.c: Check downloaded file size in pkg_verify()

Hash algorithms (particularly weak ones like md5) are susceptible to
hash collisions -- a condition where two files/strings results in the
same hash. This can be exploited, e.g. to defeat digital signatures, by
padding malicious files with garbage data to coerce an identical hash
to that of legitimately signed files. Such exploits are significantly
harder when file size cannot change.

This change adds a file size constraint to pkg_verify() before checking
hashes: Downloaded IPKs must have the same file size that's encoded in
feed index (Packages file).

This is particularly useful when using opkg with signed feeds, I.e.
feeds with signed Packages files of otherwise unsigned IPKs. It makes
it harder to defeat the enclosed hashes.

Signed-off-by: Haris Okanovic <haris.okanovic@ni.com>

Upstream-Status: Backport
---

[PATCH v2]
 * Fix tests/opk.py: add "Size" attribute to index

[PATCH v3]
 * Use stat() instead of lstat() to accommodate unit tests which use
   symlink farm to implement feeds
---
 libopkg/pkg.c | 28 ++++++++++++++++++++++++----
 tests/opk.py  |  2 ++
 2 files changed, 26 insertions(+), 4 deletions(-)

diff --git a/libopkg/pkg.c b/libopkg/pkg.c
index ca5ff08..450dc39 100644
--- a/libopkg/pkg.c
+++ b/libopkg/pkg.c
@@ -1504,12 +1504,32 @@ int pkg_write_changed_filelists(void)
 int pkg_verify(pkg_t * pkg)
 {
     int err;
+    struct stat pkg_stat;
     char *local_sig_filename = NULL;
 
-    /* Exit if the package doesn't exist locally as the caller may be about to
-     * download it. */
-    if (!file_exists(pkg->local_filename))
-        return 1;
+    err = stat(pkg->local_filename, &pkg_stat);
+    if (err) {
+        if (errno == ENOENT) {
+            /* Exit with soft error 1 if the package doesn't exist.
+             * This allows the caller to download it without nasty
+             * messages in the error log.
+             */
+            return 1;
+        }
+        else {
+            opkg_msg(ERROR, "Failed to stat %s: %s\n",
+                pkg->local_filename, strerror(errno));
+            goto fail;
+        }
+    }
+
+    /* Check size to mitigate hash collisions. */
+    if (pkg_stat.st_size < 1 || pkg_stat.st_size != pkg->size) {
+        err = -1;
+        opkg_msg(ERROR, "File size mismatch: %s is %lld bytes, expecting %lu bytes\n",
+            pkg->local_filename, (long long int)pkg_stat.st_size, pkg->size);
+        goto fail;
+    }
 
 #ifdef HAVE_SHA256
     if (pkg->sha256sum) {
diff --git a/tests/opk.py b/tests/opk.py
index 63c3e00..c818f1c 100644
--- a/tests/opk.py
+++ b/tests/opk.py
@@ -142,8 +142,10 @@ class OpkGroup:
 				f.write("{}: {}\n".format(k, opk.control[k]))
 			fpattern = "{Package}_{Version}_{Architecture}.opk"
 			fname = fpattern.format(**opk.control)
+			fsize = os.stat(fname).st_size
 			md5sum = md5sum_file(fname)
 			f.write("Filename: {}\n".format(fname))
+			f.write("Size: {}\n".format(fsize))
 			f.write("MD5Sum: {}\n".format(md5sum))
 			f.write("\n")
 		f.close()
-- 
2.20.0

